package amazon;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CodeAssessment2 {
    public static void main(String[] args) {
        System.out.println(minRetailersToRelocate(
                Arrays.asList(1, 2, 3, 4),
                Arrays.asList(2, 3, 5, 5)
        ));
//        System.out.println(minRetailersToRelocate(
//                Arrays.asList(58007, 10627, 4389, 33453, 20470, 29668, 43284, 60473, 15358, 32418, 79668, 6835, 89259, 59076, 14578, 15083, 80313, 57538, 54408, 55677, 92355, 59011, 48140, 38704, 28412, 48429, 88720, 25408, 95887, 35787, 83732, 15390, 73732, 20258, 53932, 50739, 85987, 6041, 78399, 16992, 80464, 203, 43613, 10932, 92543, 99735, 54578, 5861, 3426, 4710, 50102, 20668, 94166, 47654, 96811, 59408, 16667, 62679, 73767, 64625, 24439, 61322, 47623, 92381, 350, 37564, 11722, 9631, 76833, 18893, 42093, 35816, 13636, 91271, 47677, 67989, 77493, 40427, 85498, 79519, 27286, 70567, 23767, 70873, 23876, 30202, 28850, 72662, 6031, 38995, 48496, 91505, 44156, 93031, 46497, 11843, 55128, 20372, 1645, 99509, 81899, 61049, 56970, 90158, 48048, 47273, 13418, 20770, 44144, 91022, 15899, 95634, 19381, 38719, 59795, 33199, 48487, 37944, 41571, 46859, 60797, 32422, 52213, 98705, 78270, 76780, 69931, 20435, 78330, 65296, 15389, 53261, 48054, 85732, 46281, 19524, 42254, 37214, 37118, 57109, 12000, 93271, 44414, 62227, 84575, 28567, 36754, 51840, 47319, 55100, 13858, 74048, 65556, 76689, 88676, 60202, 55184, 8840, 41983, 34783, 60958, 25958, 17051, 18381, 58088, 85855, 66406, 95036, 18574, 79162, 64905, 20926, 80162, 26490, 38322, 98263, 15408, 18259, 11104, 84970, 68433, 44595, 96356, 62954, 34286, 3042, 51564, 66907, 86415, 13514, 40123, 8862, 98126, 75261, 49355, 68021, 70758, 55274, 12453, 44455, 26323, 46783, 19246, 14465, 13876, 1828, 61695, 11698, 31107, 12483, 68874, 22961, 71766, 79201, 56678, 83813, 61269, 48616, 79505, 59866, 95370, 5023, 43067, 8181, 65987, 29340, 53619, 87844, 98737, 4940, 33111, 48238, 15009, 92069, 47809, 81291, 17987, 88678, 16877, 85506, 4711, 62957, 62673, 90615, 8108, 99708, 67580, 81087, 16441, 27534, 18010, 46822, 68040, 88713, 33731, 32070, 21188, 53909, 38473, 55937, 10136, 45279, 41978, 18828, 40601, 89776, 64941, 31042, 72259, 83087, 12404, 54343, 69331, 94611, 78354, 25028, 75517, 4456, 75703, 70551, 40787, 68584, 76560, 33356, 92644, 44016, 54226, 11445, 20430, 46601, 93291, 11622, 37810, 14647, 74025, 30144, 39359, 53619, 69165, 48418, 14053, 90127, 23320, 56529, 28853, 60930, 73007, 95225, 1391, 20833, 30336, 30889, 1738, 86315, 90542, 11791, 66660, 465, 50420, 80263, 19938, 31636, 11193, 77390, 35785, 6762, 21933, 19417, 80183, 7731, 43679, 7954, 75693, 21624, 41072, 38572, 92877, 56401, 84669, 89645, 11184, 42554, 13622, 11658, 21935, 27936, 8043, 39455, 28278, 41142, 64829, 9758, 93978, 27212, 3489, 76081, 52505, 74599, 5443, 93097, 84574, 62906, 85121, 16170, 14268, 46128, 99595, 71730, 45454, 51771, 63156, 9783, 66407, 8322, 32467, 81215, 227, 45837, 52811, 31300, 7098, 17856, 1677, 6557, 47668, 73559, 16564, 10577, 45867, 63949, 32302, 99389, 41041, 92802, 34809, 48886, 30560, 66150, 89765, 32322, 2527, 8548, 69527, 6838, 46681, 83165, 31288, 59915, 1510, 84673, 87481, 14978, 9234, 26708, 43985, 72510, 71330, 46460, 60639, 83663, 79017, 88636, 75804, 73706, 52355, 33091, 42947, 72481, 10746, 939, 53723, 20974, 51362, 61995, 14076, 9147, 17436, 76659, 58733, 66376, 35074, 1001, 12009, 42931, 60045, 8904, 2623, 52612, 3098, 31383, 64190, 16653, 1968, 75349, 14212, 1991, 76981, 41281, 35741, 19510, 72355, 32964, 78208, 63422, 22987, 90987, 25056, 74846, 18107, 82655, 82085, 98428, 13717, 24131, 2062, 80893, 13223, 30039, 6769, 15315, 77149, 4833, 14345, 88714, 76693, 23873, 61584, 78476, 25101, 46701, 27751, 95236, 55766, 30252, 21276, 26676, 69103, 11206, 20498, 10490, 43786, 69845, 9286, 49665, 65509, 62448, 60972, 58896, 39605, 26993, 700, 93293, 34446, 16096, 6825, 59199, 74145, 9549, 27291, 24306, 82640, 9293, 75275, 36208, 94370, 21960, 44150, 80263, 70773, 43599, 87180, 1161, 45095, 9191, 86333, 65196, 8652, 67967, 44791, 46445, 84631, 2608, 49025, 19065, 9496, 55256, 35522, 61654, 94203, 89584, 72434, 88964, 84742, 19793, 73753, 2473, 31036, 20296, 88550, 47876, 98957, 25391, 7350, 35846, 63711, 81890, 28751, 92618, 85397, 78492, 55629, 88179, 92416, 69490, 77719, 87896, 93348, 69344, 48560, 87844, 25190, 32548, 43138, 46343, 12547, 26761, 29582, 25498, 59591, 70910, 24521, 81909, 55592, 16038, 70482, 92271, 65663),
//                Arrays.asList(58942, 40452, 25203, 83697, 83941, 69925, 52427, 63796, 92156, 56432, 85924, 14489, 96106, 91318, 38338, 54675, 82903, 98511, 63059, 63325, 99540, 79916, 76465, 42992, 95416, 95163, 95050, 84570, 96483, 41363, 92518, 48286, 77571, 91269, 73282, 94135, 86094, 75608, 97245, 23603, 93225, 32564, 75361, 93871, 94161, 99926, 94534, 84107, 85938, 60387, 63094, 41652, 99853, 50446, 98944, 96278, 71489, 73623, 84632, 90472, 39586, 74399, 96953, 93998, 33057, 42929, 96563, 79080, 92422, 56119, 99470, 94840, 69939, 94884, 55985, 69635, 79990, 79160, 90410, 90924, 56930, 91823, 47732, 78380, 94890, 64732, 99581, 77683, 29516, 39657, 65414, 91659, 47596, 98545, 60630, 91827, 97935, 97354, 59151, 99610, 98373, 85244, 60048, 91889, 94572, 85051, 91936, 33686, 98272, 98407, 42777, 98975, 50063, 76743, 89771, 64382, 49712, 50693, 87111, 49258, 61946, 54068, 75034, 99955, 89575, 93669, 99222, 85044, 78740, 90719, 81352, 95343, 98609, 94112, 91056, 34353, 88132, 49432, 61212, 85343, 89910, 99079, 48580, 74975, 96435, 56407, 78633, 69737, 59614, 61964, 34128, 96298, 67559, 79367, 97939, 95321, 74923, 35421, 87643, 41155, 83953, 55761, 96685, 37413, 87995, 95450, 86179, 96637, 84025, 86328, 75975, 93804, 98416, 83556, 85585, 99199, 58661, 82285, 30107, 95170, 73738, 67397, 99952, 81991, 76644, 18391, 82468, 89894, 92231, 90811, 52669, 58325, 98369, 75406, 49600, 88124, 84104, 90351, 20361, 45431, 94371, 49592, 69980, 23118, 52616, 91880, 85042, 80117, 45346, 82226, 78426, 24236, 89339, 81925, 95847, 97332, 99710, 49758, 83326, 66890, 96024, 84621, 76096, 90455, 82283, 97443, 60122, 94497, 99695, 79180, 50982, 96954, 44713, 93489, 60675, 88398, 50277, 95787, 35270, 97217, 40448, 93064, 65957, 91148, 60741, 99900, 96147, 81177, 81320, 59264, 81726, 49059, 99895, 91589, 75414, 73745, 32117, 64090, 53008, 63270, 57441, 49019, 69409, 48489, 96529, 91879, 95181, 81736, 86846, 91117, 67792, 71007, 82482, 99994, 99240, 60475, 90710, 86556, 86804, 78993, 88616, 98816, 86471, 53411, 95708, 99360, 67777, 85417, 95805, 66562, 96678, 90909, 49534, 77391, 97129, 85609, 83433, 81120, 91912, 49264, 64261, 98733, 71977, 77051, 83565, 65051, 73253, 95439, 53646, 78756, 63313, 69346, 31515, 96455, 97546, 89755, 69320, 9165, 76846, 97896, 63307, 64370, 22817, 78365, 81866, 91083, 68293, 79092, 81348, 49768, 50758, 16462, 85100, 72982, 65796, 80515, 93593, 59675, 87166, 92632, 99756, 90486, 73093, 17491, 76781, 89780, 81898, 96264, 50480, 44827, 76198, 59628, 97388, 54051, 88356, 77695, 92389, 90641, 35347, 98639, 88771, 69064, 95673, 77059, 63289, 61830, 99964, 97741, 50593, 95300, 95368, 34219, 86078, 28016, 85585, 86186, 14109, 71929, 84257, 93049, 97331, 94566, 93234, 39113, 87508, 89042, 35375, 93724, 48855, 73212, 97617, 99450, 96782, 93349, 86251, 91699, 58140, 84138, 95124, 33275, 55450, 14937, 98111, 66752, 59906, 96993, 71852, 69658, 60430, 97503, 90030, 39124, 54573, 68976, 82696, 73733, 73208, 89953, 98401, 96728, 82898, 98939, 83745, 91609, 89210, 85011, 74130, 91361, 82449, 76750, 88058, 70142, 93782, 79243, 69159, 34817, 74655, 85160, 89506, 88770, 48752, 48743, 12871, 56170, 88585, 46297, 36110, 84603, 38460, 93378, 70260, 83173, 51611, 98258, 60539, 74525, 85094, 73575, 87830, 36053, 72827, 70331, 92420, 89440, 30675, 92794, 35475, 92055, 41352, 96158, 90251, 99468, 45895, 73961, 17580, 98287, 31120, 72476, 40849, 17005, 97956, 78330, 25981, 96540, 92195, 31247, 88725, 83572, 63734, 52418, 49391, 96693, 56613, 42548, 37779, 56506, 81225, 76558, 86190, 85692, 64547, 94011, 71929, 80591, 69933, 92506, 63802, 74755, 87461, 81971, 53330, 98401, 82124, 31711, 35690, 59894, 93607, 62776, 70583, 27110, 85707, 99046, 91947, 86253, 95359, 99988, 70706, 85146, 71053, 70728, 92085, 8759, 82708, 68409, 93062, 68012, 76381, 85573, 56234, 62192, 87043, 26982, 59342, 58885, 11230, 82748, 99140, 69128, 98434, 92537, 83474, 91308, 99983, 24707, 93952, 96720, 78023, 55362, 98878, 96426, 99680, 45304, 56356, 84157, 78234, 99860, 56493, 95994, 99453, 84377, 55739, 90894, 97507, 72452, 91312, 95802, 98469, 75252, 80541, 95525, 44615, 82641, 59238, 54320, 76973, 74553, 47475, 82576, 85676, 79271, 26889, 88645, 66002, 19574, 72661, 99603, 87260)
//        ));
//        System.out.println(isIntersect(new Region(1, 2), new Region(2, 3)));
//        System.out.println(isIntersect(new Region(1, 2), new Region(3, 5)));
//        System.out.println(isIntersect(new Region(1, 2), new Region(4, 5)));

    }

    public static int minRetailersToRelocate(List<Integer> regionStart, List<Integer> regionEnd) {
        // Write your code here
        // Direction:
        // find the number of regions NOT intersect per each Region
        // from that array, find the smallest number
        System.out.println(regionStart);

        System.out.println(regionEnd);
        //1) convert start/end to Region
        List<Region> regions = new ArrayList<>();

        for (int i = 0; i < regionStart.size(); i++) {
            regions.add(new Region(regionStart.get(i), regionEnd.get(i)));
        }

        //2) Count the number of intersecting
        List<Integer> notIntersectCount = new ArrayList<>();

        for (int i = 0; i < regions.size(); i++) {
            Region origin = regions.get(i);

            List<Region> remainingRegions = new ArrayList<Region>(regions);
            remainingRegions.remove(i);

            notIntersectCount.add((int)
                    remainingRegions.stream()
                            .filter(check -> {
                                return !isIntersect(origin, check);
                            })
                            .count());
        }

        //3) finding the minimum not intersecting and return
        return notIntersectCount.stream()
                .mapToInt(Integer::valueOf)
                .min()
                .getAsInt();
    }

    private static boolean isIntersect(Region origin, Region check) {
        boolean one = (check.getStart() <= origin.getStart() && check.getEnd() >= origin.getEnd());
        boolean two = (origin.getStart() <= check.getStart() && check.getEnd() <= origin.getEnd());
        boolean three = (origin.getEnd().equals(check.getStart()));
        boolean four = (check.getEnd().equals(origin.getStart()));
        return  one || two || three || four;
    }
}

class Region {
    private Integer start;
    private Integer end;

    public Region(Integer start, Integer end) {
        this.start = start;
        this.end = end;
    }

    public Integer getStart() {
        return this.start;
    }

    public Integer getEnd() {
        return this.end;
    }
}
